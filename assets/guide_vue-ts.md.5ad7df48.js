import{o as n,c as s,a}from"./app.3590a136.js";const t='{"title":"项目配置项","description":"","frontmatter":{},"headers":[{"level":2,"title":"配置文件 tsconfig.json","slug":"配置文件-tsconfig-json"},{"level":2,"title":"安装ESLint","slug":"安装eslint"},{"level":2,"title":"安装eslint-plugin-vue","slug":"安装eslint-plugin-vue"},{"level":2,"title":"安装@typescript-eslint","slug":"安装-typescript-eslint"},{"level":2,"title":"安装eslint-plugin-prettier","slug":"安装eslint-plugin-prettier"},{"level":2,"title":"自定义ESLint检查规则","slug":"自定义eslint检查规则"},{"level":2,"title":"package.json","slug":"package-json"}],"relativePath":"guide/vue-ts.md","lastUpdated":1628238765204}',p={},o=a('<h1 id="项目配置项"><a class="header-anchor" href="#项目配置项" aria-hidden="true">#</a> 项目配置项</h1><p>Vite创建的项目时使用的是<code>vue-ts</code>模板，所以在创建项目的时候<code>package.json</code>就自带<code>了typescript</code>。该依赖会编译我们的ts文件。</p><p><a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html" target="_blank" rel="noopener noreferrer">官方文档-tsconfig.json文件</a><br><a href="https://www.tslang.cn/docs/handbook/compiler-options.html" target="_blank" rel="noopener noreferrer">官方文档-TS编译选项</a><br><a href="https://www.kuxiaoxin.com/archives/9" target="_blank" rel="noopener noreferrer">参考链接</a></p><h2 id="配置文件-tsconfig-json"><a class="header-anchor" href="#配置文件-tsconfig-json" aria-hidden="true">#</a> 配置文件 tsconfig.json</h2><p>tsconfig.json</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ↓指定ECMAScript目标版本，esnext为最新版本</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓指定生成哪个模块系统代码，esnext为最新版本</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓决定如何处理模块。</span>\n    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓启用所有严格类型检查选项。</span>\n    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止对同一个文件的不一致的引用。</span>\n    <span class="token property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。</span>\n    <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁用函数参数双向协变检查。</span>\n    <span class="token property">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在 .tsx文件里支持JSX</span>\n    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;preserve&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓解析非相对模块名的基准目录。查看 模块解析文档了解详情。</span>\n    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓允许编译javascript文件。</span>\n    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓生成相应的 .map文件。</span>\n    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓若有未使用的局部变量则抛错。</span>\n    <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓若有未使用的参数则抛错。</span>\n    <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓启用实验性的ES装饰器。</span>\n    <span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓编译过程中需要引入的库文件的列表。</span>\n    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓要包含的类型声明文件名列表。</span>\n    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vite/client&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓要包含的类型声明文件路径列表。</span>\n    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./node_modules/@types/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./types&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;incremental&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在表达式和声明上有隐含的 any类型时报错。</span>\n    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓忽略所有的声明文件（ *.d.ts）的类型检查。</span>\n    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓模块名到基于 baseUrl的路径映射的列表。查看 模块解析文档了解详情。</span>\n    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;/@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;/#/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;types/*&quot;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ↓指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span>\n  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;src/**/*.ts&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;src/**/*.d.ts&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;src/**/*.tsx&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;src/**/*.vue&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;types/**/*.d.ts&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;types/**/*.ts&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;mock/**/*.ts&quot;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 指定一个排除列表（include的反向操作）</span>\n  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/*.js&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="安装eslint"><a class="header-anchor" href="#安装eslint" aria-hidden="true">#</a> 安装ESLint</h2><p><code>ESLint</code>简单的来说就是去判断你的JS代码写的格式对不对的一个依赖。有了它你的代码可以写的更漂亮。 <code>Vue3</code>对应<code>eslint-plugin-vue</code>。</p><p><a href="https://eslint.org/docs/rules/" target="_blank" rel="noopener noreferrer">ESLint的配置规则</a></p><p><code>yarn add eslint -D</code> or <code>yarn add eslint --dev</code></p><p>.eslintrc.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ↓默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的 package.json 文件或者 .eslintrc.* 文件里的 eslintConfig 字段下设置 &quot;root&quot;: true。ESLint 一旦发现配置文件中有 &quot;root&quot;: true，它就会停止在父级目录中寻找。</span>\n  <span class="token comment">// ↓此项是用来告诉eslint找当前配置文件不能往父级查找</span>\n  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// ↓指定你想启用的环境</span>\n  env<span class="token operator">:</span> <span class="token punctuation">{</span>\n    browser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    node<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    es6<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ↓设置解析器</span>\n  parser<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// ↓解析器选项</span>\n  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ↓扩展项</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ↓自定义规则配置</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>.eslintignore</p><div class="language-js"><pre><code><span class="token operator">*</span><span class="token punctuation">.</span>sh\nnode_modules\n<span class="token operator">*</span><span class="token punctuation">.</span>md\n<span class="token operator">*</span><span class="token punctuation">.</span>woff\n<span class="token operator">*</span><span class="token punctuation">.</span>ttf\n<span class="token punctuation">.</span>vscode\n<span class="token punctuation">.</span>idea\ndist\n<span class="token operator">/</span><span class="token keyword">public</span>\n<span class="token operator">/</span>docs\n<span class="token punctuation">.</span>husky\n<span class="token punctuation">.</span>local\n<span class="token operator">/</span>bin\nDockerfile\n</code></pre></div><h2 id="安装eslint-plugin-vue"><a class="header-anchor" href="#安装eslint-plugin-vue" aria-hidden="true">#</a> 安装eslint-plugin-vue</h2><blockquote><p><code>ESLint</code>是检查JS代码的依赖，那么它怎么去检查<code>Vue</code>语法的文件呢？<br> 需要安装vue官方开发的<code>ESLint</code>插件<code>eslint-plugin-vue</code>。<br> 这样<code>ESLint</code>就知道该怎么检查<code>vue</code>的文件了。</p></blockquote><p>vue-eslint-parser</p><p><a href="https://blog.csdn.net/weixin_34138673/article/details/113536473" target="_blank" rel="noopener noreferrer">vue eslint 升级_ESLint 的 parser 是个什么东西</a><br> ESLint 会对我们的代码进行校验，而 parser 的作用是将我们写的代码转换为 ESTree，ESLint 会对 ESTree 进行校验。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>怎么理解<code>eslint-plugin-vue</code>和<code>vue-eslint-parser</code>的关系呢?</p></div><p><code>vue-eslint-parser</code>将vue文件转换成<code>ESTree</code>。然后使用<code>eslint-plugin-vue</code>来检查这个<code>ESTree</code>。查出的结果交给<code>ESLint</code>。</p><blockquote><p><code>yarn add eslint-plugin-vue vue-eslint-parser -D</code></p></blockquote><p>将插件配置进ESLint</p><p>.eslintrc.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  parser<span class="token operator">:</span> <span class="token string">&#39;vue-eslint-parser&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;plugin:vue/vue3-recommended&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="安装-typescript-eslint"><a class="header-anchor" href="#安装-typescript-eslint" aria-hidden="true">#</a> 安装@typescript-eslint</h2><p>安装<code>eslint-plugin-vue</code>和<code>vue-eslint-parser</code> 同理需要安装<code>@typescript-eslint/eslint-plugin</code>和<code>@typescript-eslint/parser</code></p><p><a href="https://www.npmjs.com/package/@typescript-eslint/eslint-plugin" target="_blank" rel="noopener noreferrer">TS-ESLint规则</a></p><p><code>yarn add @typescript-eslint/eslint-plugin @typescript-eslint/parser -D</code></p><p>将插件配置进ESLint</p><p>.eslintrc.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    parser<span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>\n    ecmaVersion<span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>\n    sourceType<span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n    jsxPragma<span class="token operator">:</span> <span class="token string">&quot;React&quot;</span><span class="token punctuation">,</span>\n    ecmaFeatures<span class="token operator">:</span> <span class="token punctuation">{</span>\n      jsx<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      tsx<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:vue/vue3-recommended&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="安装eslint-plugin-prettier"><a class="header-anchor" href="#安装eslint-plugin-prettier" aria-hidden="true">#</a> 安装eslint-plugin-prettier</h2><p><code>prettier</code>用来格式化代码的。一般IDE都有prettier的插件，在保存的时候格式化代码。<br><code>eslint-plugin-prettier</code>就是通过JS来判断代码格式是否正确。而<code>eslint-plugin-prettier</code>插件依赖于prettier依赖。</p><p>prettier.config.js</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  printWidth<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  tabWidth<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  useTabs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  semi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  vueIndentScriptAndStyle<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  singleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  quoteProps<span class="token operator">:</span> <span class="token string">&#39;as-needed&#39;</span><span class="token punctuation">,</span>\n  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  trailingComma<span class="token operator">:</span> <span class="token string">&#39;es5&#39;</span><span class="token punctuation">,</span>\n  jsxBracketSameLine<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  jsxSingleQuote<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  arrowParens<span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>\n  insertPragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  requirePragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  proseWrap<span class="token operator">:</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">,</span>\n  htmlWhitespaceSensitivity<span class="token operator">:</span> <span class="token string">&#39;strict&#39;</span><span class="token punctuation">,</span>\n  endOfLine<span class="token operator">:</span> <span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span>\n  rangeStart<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>.prettierignore</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>那么<code>eslint-config-prettier</code>插件又是干嘛的?</p></div><p><code>prettier</code>和<code>ESLint</code>之间有些规则有冲突。<code>eslint-config-prettier</code>将<code>prettier</code>解决冲突一些规则默认关闭。</p><blockquote><p>yarn add prettier eslint-plugin-prettier eslint-config-prettier -D</p></blockquote><p>配置进ESLint</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;plugin:vue/vue3-recommended&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;prettier&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;plugin:prettier/recommended&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="自定义eslint检查规则"><a class="header-anchor" href="#自定义eslint检查规则" aria-hidden="true">#</a> 自定义ESLint检查规则</h2><p><code>ESLint</code>是用来检查代码的。又安装了那么多的插件。 但是官方默认的方案有时不一样符合我们的要求。我们需要自定义自己的规则。</p><p>修改规则</p><p><a href="https://www.kuxiaoxin.com/archives/14" target="_blank" rel="noopener noreferrer">.eslintrc.js</a> rules字段</p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ↓禁止使用@ts-ignore来消除ESLint检查</span>\n    <span class="token string">&#39;@typescript-eslint/ban-ts-ignore&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在函数和类方法上需要显式的返回类型</span>\n    <span class="token string">&#39;@typescript-eslint/explicit-function-return-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止使用any类型</span>\n    <span class="token string">&#39;@typescript-eslint/no-explicit-any&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓除导入语句外，禁止使用require语句</span>\n    <span class="token string">&#39;@typescript-eslint/no-var-requires&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止使用空函数</span>\n    <span class="token string">&#39;@typescript-eslint/no-empty-function&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓对自定义事件名称强制使用特定的大小写</span>\n    <span class="token string">&#39;vue/custom-event-name-casing&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止定义前使用</span>\n    <span class="token string">&#39;no-use-before-define&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在定义变量之前不允许使用变量</span>\n    <span class="token string">&#39;@typescript-eslint/no-use-before-define&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止使用@ts-注解</span>\n    <span class="token string">&#39;@typescript-eslint/ban-ts-comment&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止使用特定类型</span>\n    <span class="token string">&#39;@typescript-eslint/ban-types&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止使用!后缀运算符进行非null断言</span>\n    <span class="token string">&#39;@typescript-eslint/no-non-null-assertion&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在导出的函数和类的公共类方法上需要显式的返回值和参数类型</span>\n    <span class="token string">&#39;@typescript-eslint/explicit-module-boundary-types&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止使用未使用的变量</span>\n    <span class="token string">&#39;@typescript-eslint/no-unused-vars&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        argsIgnorePattern<span class="token operator">:</span> <span class="token string">&#39;^h$&#39;</span><span class="token punctuation">,</span>\n        varsIgnorePattern<span class="token operator">:</span> <span class="token string">&#39;^h$&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓禁止使用未使用的变量</span>\n    <span class="token string">&#39;no-unused-vars&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        argsIgnorePattern<span class="token operator">:</span> <span class="token string">&#39;^h$&#39;</span><span class="token punctuation">,</span>\n        varsIgnorePattern<span class="token operator">:</span> <span class="token string">&#39;^h$&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在函数括号前需要或不允许有空格</span>\n    <span class="token string">&#39;space-before-function-paren&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// ↓强制属性顺序</span>\n    <span class="token string">&#39;vue/attributes-order&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓强制每个组件应位于其自己的文件中</span>\n    <span class="token string">&#39;vue/one-component-per-file&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在标签的右括号之前要求或不允许换行</span>\n    <span class="token string">&#39;vue/html-closing-bracket-newline&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓强制每行的最大属性数</span>\n    <span class="token string">&#39;vue/max-attributes-per-line&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在多行元素的内容之前和之后需要换行</span>\n    <span class="token string">&#39;vue/multiline-html-element-content-newline&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在单行元素的内容之前和之后需要换行</span>\n    <span class="token string">&#39;vue/singleline-html-element-content-newline&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓在模板中的自定义组件上实施属性命名样式</span>\n    <span class="token string">&#39;vue/attribute-hyphenation&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓需要道具的默认值</span>\n    <span class="token string">&#39;vue/require-default-prop&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// ↓实施自我封闭的风格</span>\n    <span class="token comment">// &#39;vue/html-self-closing&#39;: &#39;off&#39;,</span>\n    <span class="token string">&#39;vue/html-self-closing&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        html<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token keyword">void</span><span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>\n          normal<span class="token operator">:</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">,</span>\n          component<span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        svg<span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>\n        math<span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="package-json"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> package.json</h2><div class="language-js"><pre><code>  <span class="token string">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;@typescript-eslint/eslint-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.28.3&quot;</span><span class="token punctuation">,</span> <span class="token comment">// eslint-plugin-prettier</span>\n    <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.28.3&quot;</span><span class="token punctuation">,</span> <span class="token comment">// vue-eslint-parser</span>\n    <span class="token string">&quot;eslint-config-prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.3.0&quot;</span><span class="token punctuation">,</span> <span class="token comment">// eslint-plugin-prettier</span>\n    <span class="token string">&quot;eslint-plugin-prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.4.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;eslint-plugin-vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.14.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;vue-eslint-parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.9.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.3.2&quot;</span><span class="token punctuation">,</span>\n</code></pre></div>',48);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
